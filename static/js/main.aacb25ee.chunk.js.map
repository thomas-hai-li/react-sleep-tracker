{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/SleepGoal.js","utils/Time.js","components/ResetedDeficit.js","components/SleepEntry.js","components/SleepEntriesList.js","components/AddSleepEntry.js","App.js","index.js"],"names":["Header","props","className","title","state","action","type","sleepHoursGoal","payload","sleepEntries","filter","e","id","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","updateSleepHoursGoal","numHour","deleteSleepEntry","addSleepEntry","sleepEntry","SleepGoal","useContext","React","useState","updateState","forceUpdate","useCallback","contentEditable","onInput","newGoal","target","innerHTML","millisecToHHMM","mils","sec_num","parseInt","hours","Math","floor","minutes","RestedDeficit","averageDeficitHHMM","numRestedDays","reduce","num","entry","durationHours","deficitEntries","length","averageDeficitMillisec","console","log","SleepEntry","date","durationHHMM","startTime","endTime","notes","toDateString","onClick","SleepEntriesList","map","key","AddSleepEntry","setDate","setStartTime","setEndTime","setNotes","timezone","Date","toLocaleTimeString","timeZoneName","split","today","useEffect","currentDate","time","newStartTime","getHours","setHours","newEndTime","onSubmit","preventDefault","durationMillisec","getTime","alert","newSleepEntry","random","htmlFor","onChange","autoComplete","spellCheck","autoCorrect","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aacb25ee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Header = (props) => {\r\n  return <h2 className=\"header\">{props.title}</h2>;\r\n};\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case 'UPDATE_SLEEPHOURSGOAL':\r\n      return {\r\n        ...state,\r\n        sleepHoursGoal: action.payload\r\n      };\r\n    case 'DELETE_SLEEPENTRY':\r\n      return {\r\n        ...state,\r\n        sleepEntries: state.sleepEntries.filter((e) => e.id !== action.payload)\r\n      };\r\n    case 'ADD_SLEEPENTRY':\r\n      return {\r\n        ...state,\r\n        sleepEntries: [ action.payload, ...state.sleepEntries ]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\n// initial state\r\nconst initialState = {\r\n  sleepHoursGoal: 8,\r\n  sleepEntries: []\r\n};\r\n\r\n// create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// provider component\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [ state, dispatch ] = useReducer(AppReducer, initialState);\r\n\r\n  // actions\r\n  function updateSleepHoursGoal(numHour) {\r\n    dispatch({\r\n      type: 'UPDATE_SLEEPHOURSGOAL',\r\n      payload: numHour\r\n    });\r\n  }\r\n\r\n  function deleteSleepEntry(id) {\r\n    dispatch({\r\n      type: 'DELETE_SLEEPENTRY',\r\n      payload: id\r\n    });\r\n  }\r\n\r\n  function addSleepEntry(sleepEntry) {\r\n    dispatch({\r\n      type: 'ADD_SLEEPENTRY',\r\n      payload: sleepEntry\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        sleepHoursGoal: state.sleepHoursGoal,\r\n        sleepEntries: state.sleepEntries,\r\n        updateSleepHoursGoal,\r\n        deleteSleepEntry,\r\n        addSleepEntry\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext, useState } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const SleepGoal = () => {\r\n  const { sleepHoursGoal, updateSleepHoursGoal } = useContext(GlobalContext);\r\n  const [ , updateState ] = React.useState();\r\n  const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n  function onInput(newGoal) {\r\n    newGoal = +newGoal;\r\n\r\n    if (newGoal <= 24) {\r\n      updateSleepHoursGoal(newGoal);\r\n      forceUpdate();\r\n    } else {\r\n      updateSleepHoursGoal(sleepHoursGoal);\r\n      forceUpdate();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>My Goal</h4>\r\n      <h1>\r\n        <span contentEditable onInput={(e) => onInput(e.target.innerHTML)}>\r\n          {sleepHoursGoal}\r\n        </span>{' '}\r\n        hours\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n","export const millisecToHHMM = (mils) => {\r\n  var sec_num = parseInt(mils / 1000, 10);\r\n  var hours = Math.floor(sec_num / 3600);\r\n  var minutes = Math.floor((sec_num - hours * 3600) / 60);\r\n\r\n  if (hours < 10) {\r\n    hours = '0' + hours;\r\n  }\r\n  if (minutes < 10) {\r\n    minutes = '0' + minutes;\r\n  }\r\n  return `${hours}:${minutes}`;\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { millisecToHHMM } from '../utils/Time';\r\n\r\nexport const RestedDeficit = () => {\r\n  const { sleepHoursGoal, sleepEntries } = useContext(GlobalContext);\r\n\r\n  const numRestedDays = sleepEntries.reduce((num, entry) => {\r\n    if (entry.durationHours >= sleepHoursGoal) {\r\n      num += 1;\r\n    }\r\n    return num;\r\n  }, 0);\r\n\r\n  // Calculate average deficit in HH:MM format\r\n\r\n  let averageDeficitHHMM;\r\n  const deficitEntries = sleepEntries.filter((entry) => entry.durationHours < sleepHoursGoal);\r\n\r\n  if (deficitEntries.length !== 0) {\r\n    const sumDeficitHours = deficitEntries.reduce((num, entry) => {\r\n      return num + (sleepHoursGoal - entry.durationHours);\r\n    }, 0);\r\n    const averageDeficitMillisec = sumDeficitHours * 3.6e6 / deficitEntries.length;\r\n    averageDeficitHHMM = millisecToHHMM(averageDeficitMillisec);\r\n  } else {\r\n    averageDeficitHHMM = '0:00';\r\n  }\r\n\r\n  console.log(deficitEntries);\r\n  // console.log(sumDeficitHours);\r\n  // console.log(averageDeficitMillisec);\r\n  console.log(averageDeficitHHMM);\r\n\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <div>\r\n        <h4>Rested Days</h4>\r\n        <p className=\"stats plus\">{numRestedDays}</p>\r\n      </div>\r\n      <div>\r\n        <h4>AVG Deficit</h4>\r\n        <p className=\"stats minus\">{averageDeficitHHMM || '0:00'}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const SleepEntry = ({ sleepEntry }) => {\r\n  const { sleepHoursGoal, deleteSleepEntry } = useContext(GlobalContext);\r\n  const { id, date, startTime, endTime, notes, durationHHMM, durationHours } = sleepEntry;\r\n\r\n  return (\r\n    <li className={durationHours < sleepHoursGoal ? 'minus' : 'plus'}>\r\n      {date.toDateString()} <span>{durationHHMM}</span>\r\n      <button className=\"delete-btn\" onClick={() => deleteSleepEntry(id)}>\r\n        x\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { SleepEntry } from './SleepEntry';\r\n\r\nexport const SleepEntriesList = () => {\r\n  const { sleepEntries } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Entries</h3>\r\n      <ul className=\"list\">{sleepEntries.map((e) => <SleepEntry key={e.id} sleepEntry={e} />)}</ul>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { millisecToHHMM } from '../utils/Time';\r\n\r\nexport const AddSleepEntry = () => {\r\n  const [ date, setDate ] = useState(null);\r\n  const [ startTime, setStartTime ] = useState(null);\r\n  const [ endTime, setEndTime ] = useState(null);\r\n  const [ notes, setNotes ] = useState('');\r\n\r\n  const { addSleepEntry } = useContext(GlobalContext);\r\n\r\n  const timezone = new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];\r\n  const today = new Date().toDateString();\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!date || !startTime || !endTime) {\r\n      return;\r\n    }\r\n    const durationMillisec = endTime.getTime() - startTime.getTime();\r\n    if (durationMillisec < 0) {\r\n      alert('Enter a valid time range.');\r\n      return;\r\n    }\r\n\r\n    const durationHHMM = millisecToHHMM(durationMillisec);\r\n    const durationHours = durationMillisec / 3.6e6;\r\n\r\n    const newSleepEntry = {\r\n      id: Math.floor(Math.random() * 1000000000000),\r\n      date,\r\n      startTime,\r\n      endTime,\r\n      notes,\r\n      durationHHMM,\r\n      durationHours\r\n    };\r\n\r\n    addSleepEntry(newSleepEntry);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (date) {\r\n        let currentDate = date.toDateString();\r\n        if (startTime) {\r\n          let time = startTime.toLocaleTimeString();\r\n          let newStartTime = new Date(`${currentDate} ${time} ${timezone}`);\r\n          if (newStartTime.getHours() >= 12) {\r\n            newStartTime.setHours(newStartTime.getHours() - 24); // set the start time date to the day before if time is in PM\r\n          }\r\n          setStartTime(newStartTime);\r\n        }\r\n        if (endTime) {\r\n          let time = endTime.toLocaleTimeString();\r\n          let newEndTime = new Date(`${currentDate} ${time} ${timezone}`);\r\n          setEndTime(newEndTime);\r\n        }\r\n      }\r\n    },\r\n    [ date ]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h3>Add new entry</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <label htmlFor=\"date\">Date</label>\r\n        <div className=\"form-control\">\r\n          <input type=\"date\" onChange={(e) => setDate(new Date(e.target.value + ' ' + timezone))} />\r\n        </div>\r\n        <label htmlFor=\"amount\">Start End</label>\r\n        <div className=\"form-control\">\r\n          <input\r\n            type=\"time\"\r\n            onChange={(e) => {\r\n              let newStartTime;\r\n              if (date) {\r\n                newStartTime = new Date(`${date.toDateString()} ${e.target.value} ${timezone}`);\r\n              } else {\r\n                newStartTime = new Date(`${today} ${e.target.value} ${timezone}`);\r\n              }\r\n              if (newStartTime.getHours() >= 12) {\r\n                newStartTime.setHours(newStartTime.getHours() - 24); // set the start time date to the day before if time is in PM\r\n              }\r\n              setStartTime(newStartTime);\r\n            }}\r\n          />\r\n          <input\r\n            type=\"time\"\r\n            onChange={(e) => {\r\n              if (date) {\r\n                setEndTime(new Date(`${date.toDateString()} ${e.target.value} ${timezone}`));\r\n              } else {\r\n                setEndTime(new Date(`${today} ${e.target.value} ${timezone}`));\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n        <label htmlFor=\"note\">Notes</label>\r\n        <div className=\"form-control\">\r\n          <textarea\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            spellCheck=\"false\"\r\n            autoCorrect=\"off\"\r\n            onChange={(e) => setNotes(e.target.value)}\r\n          />\r\n        </div>\r\n        <button className=\"btn\">Add entry</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport { Header } from './components/Header';\nimport { SleepGoal } from './components/SleepGoal';\nimport { RestedDeficit } from './components/ResetedDeficit';\nimport { SleepEntriesList } from './components/SleepEntriesList';\nimport { AddSleepEntry } from './components/AddSleepEntry';\n\nimport { GlobalProvider } from './context/GlobalState';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header title=\"Sleep Tracker™\" />\n      <div className=\"container\">\n        <SleepGoal />\n        <RestedDeficit />\n        <SleepEntriesList />\n        <AddSleepEntry />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}